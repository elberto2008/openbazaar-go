// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
import mock "github.com/stretchr/testify/mock"
import time "time"
import wallet "github.com/OpenBazaar/wallet-interface"

// Txns is an autogenerated mock type for the Txns type
type Txns struct {
	mock.Mock
}

// Delete provides a mock function with given fields: txid
func (_m *Txns) Delete(txid *chainhash.Hash) error {
	ret := _m.Called(txid)

	var r0 error
	if rf, ok := ret.Get(0).(func(*chainhash.Hash) error); ok {
		r0 = rf(txid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: txid
func (_m *Txns) Get(txid chainhash.Hash) (wallet.Txn, error) {
	ret := _m.Called(txid)

	var r0 wallet.Txn
	if rf, ok := ret.Get(0).(func(chainhash.Hash) wallet.Txn); ok {
		r0 = rf(txid)
	} else {
		r0 = ret.Get(0).(wallet.Txn)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(chainhash.Hash) error); ok {
		r1 = rf(txid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: includeWatchOnly
func (_m *Txns) GetAll(includeWatchOnly bool) ([]wallet.Txn, error) {
	ret := _m.Called(includeWatchOnly)

	var r0 []wallet.Txn
	if rf, ok := ret.Get(0).(func(bool) []wallet.Txn); ok {
		r0 = rf(includeWatchOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]wallet.Txn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(includeWatchOnly)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: raw, txid, value, height, timestamp, watchOnly
func (_m *Txns) Put(raw []byte, txid string, value int, height int, timestamp time.Time, watchOnly bool) error {
	ret := _m.Called(raw, txid, value, height, timestamp, watchOnly)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string, int, int, time.Time, bool) error); ok {
		r0 = rf(raw, txid, value, height, timestamp, watchOnly)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateHeight provides a mock function with given fields: txid, height, timestamp
func (_m *Txns) UpdateHeight(txid chainhash.Hash, height int, timestamp time.Time) error {
	ret := _m.Called(txid, height, timestamp)

	var r0 error
	if rf, ok := ret.Get(0).(func(chainhash.Hash, int, time.Time) error); ok {
		r0 = rf(txid, height, timestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
