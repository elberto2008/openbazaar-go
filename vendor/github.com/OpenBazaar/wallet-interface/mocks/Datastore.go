// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import wallet "github.com/OpenBazaar/wallet-interface"

// Datastore is an autogenerated mock type for the Datastore type
type Datastore struct {
	mock.Mock
}

// Keys provides a mock function with given fields:
func (_m *Datastore) Keys() wallet.Keys {
	ret := _m.Called()

	var r0 wallet.Keys
	if rf, ok := ret.Get(0).(func() wallet.Keys); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wallet.Keys)
		}
	}

	return r0
}

// Stxos provides a mock function with given fields:
func (_m *Datastore) Stxos() wallet.Stxos {
	ret := _m.Called()

	var r0 wallet.Stxos
	if rf, ok := ret.Get(0).(func() wallet.Stxos); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wallet.Stxos)
		}
	}

	return r0
}

// Txns provides a mock function with given fields:
func (_m *Datastore) Txns() wallet.Txns {
	ret := _m.Called()

	var r0 wallet.Txns
	if rf, ok := ret.Get(0).(func() wallet.Txns); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wallet.Txns)
		}
	}

	return r0
}

// Utxos provides a mock function with given fields:
func (_m *Datastore) Utxos() wallet.Utxos {
	ret := _m.Called()

	var r0 wallet.Utxos
	if rf, ok := ret.Get(0).(func() wallet.Utxos); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wallet.Utxos)
		}
	}

	return r0
}

// WatchedScripts provides a mock function with given fields:
func (_m *Datastore) WatchedScripts() wallet.WatchedScripts {
	ret := _m.Called()

	var r0 wallet.WatchedScripts
	if rf, ok := ret.Get(0).(func() wallet.WatchedScripts); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wallet.WatchedScripts)
		}
	}

	return r0
}
